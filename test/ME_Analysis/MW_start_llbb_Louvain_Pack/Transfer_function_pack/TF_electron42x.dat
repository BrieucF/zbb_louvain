<file>## #################################################################
##                                                                      ##
##                          Matrix Element                              ##
##                          ==============                              ##
##                                                                      ##
##		    Generate the transfer functions	                ##
##	             -------------------------------                    ##
## 	     			                                        ##
##				                                        ##
##    Authors: Mattelaer Olivier (UCL-CP3/ROMA3-INFN)                   ##
##             Artoisenet Pierre (OHIO) 		                ##
##				                                        ##
##    Version:     2.0.0                         			##
##    Last change: 22/09/09			                        ##
##					                                ##
##########################################################################
##########################################################################
##				                                        ##
##				                                        ##
##    Instructions:			                                ##
##									##
##	- This program  creates transfer functions in THETA/PHI/E       ##
##	- Those functions must be defined in f77 standard               ##
##	- In addition to each transfer function(START_TF), you MUST give##
##	   the typical width associated to your function (START_WIDTH)	##
##      - If a transfer functions is not defined here it will by default##
##          - equals to one for neutrino/neutralino                     ##
##          - a delta functions for the rest                            ##
##########################################################################
##                                                                      ##
##   Syntax/variables:                                                  ## 
##                                                                      ##
##  - a definition for transfer functions should define the variable tf ##
##    while a definition for the width shoud define the variable width  ##                               
##	- You can use all standard f77 functions. (All variables are	##
##		in double precision format). 	                        ##
##	- The experimental event is  defined by the variable pexp(i)    ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)	                        ##
##	- The partonic event is defined by the variable p(i)	        ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)			        ##
##		sigma can not depend on those variables		        ##
##	- You can use 10 local variables			        ##
##		(double precision):  prov1,prov2,...,prov10	        ##
##	- You can call specific functions on p or pexp:	                ##
##		-pt(p)   : transverse momenta 			        ##
##		-eta(p)  : pseudo-rapidity			        ##
##		-rap(p)  : rapidity					##
##		-theta(p): polar angle				        ##
##		-phi(p)	 : azimuthal angle				##
##	- The whole LHCO information is available.                      ##
##              -run_number,trigger                       		##
##		-eta_init(N),phi_init(N),pt_init(N)                     ##
##              -j_mass(N),ntrk(N),btag(N),had_em(N)     	        ##
##		-dummy1(N),dummy2(N)		                        ##
##	    N is the LHCO tag(first column)	                        ##
##		- current tag is n_lhco  				##
##		- tag for missing ET is met_lhco			##
##				  					##
##	- You can incorporate parameters that will be passed through    ##
##	        the transfert_card.dat. Those ones must have the        ##
##		following syntax: #1,#2,#3,.. You can restart 		##
##		the assignement for each different transfer function	##
##	- In addition to each transfer function(tf_), you MUST give	##
##		the typical width associated to your function (sigma_)	##
##		This is needed for the phase space generator      	##
##									##
##########################################################################
##########################################################################

##**********************************************************************##
##                           TF JET					##
##**********************************************************************## 
<block name='jet'>   #name can be anything 
<info> doubel gaussian with parameter depending of the energy </info>
<particles> u,d,s,c,b,g </particles>
# this defined when this tf will be used.the letter correspond to the label in
#        particles.dat
<width_type> large </width_type>
# width_type should be thin or large (thin is for energy acuurate up to 5-10%)
<variable name='E'>

<tf>
	IF (ABS(eta(pexp)) .LT. 1.6) THEN
          prov1=(#1+#2*dsqrt(p(0))+#3*p(0))
          prov2=(#4+#5*dsqrt(p(0))+#6*p(0))
          prov3=(#7+#8*dsqrt(p(0))+#9*p(0))
          prov4=(#10+#11*dsqrt(p(0))+#12*p(0))
          prov5=(#13+#14*dsqrt(p(0))+#15*p(0))

          tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))                !first gaussian
          tf=tf+prov3*exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)     !second gaussian
          tf=tf*((1d0/dsqrt(2d0*pi))/(prov2+prov3*prov5))            !normalisation
	ENDIF

        IF (ABS(eta(pexp)) .GE. 1.6)  THEN
          prov1=(#16+#17*dsqrt(p(0))+#18*p(0))
          prov2=(#19+#20*dsqrt(p(0))+#21*p(0))
          prov3=(#22+#23*dsqrt(p(0))+#24*p(0))
          prov4=(#25+#26*dsqrt(p(0))+#27*p(0))
          prov5=(#28+#29*dsqrt(p(0))+#30*p(0))

          tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))                !first gaussian
          tf=tf+prov3*exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)     !second gaussian
          tf=tf*((1d0/dsqrt(2d0*pi))/(prov2+prov3*prov5))            !normalisation
        ENDIF
</tf>
<width>
	IF (ABS(eta(pexp)).LT. 1.6) THEN
          prov2=(#4+#5*dsqrt(pexp(0))+#6*pexp(0))
          prov5=(#13+#14*dsqrt(pexp(0))+#15*pexp(0))

          width=max(prov2,prov5)
	ENDIF

        IF (ABS(eta(pexp)) .GE. 1.6)  THEN
          prov2=(#19+#20*dsqrt(pexp(0))+#21*pexp(0))
          prov5=(#28+#29*dsqrt(pexp(0))+#30*pexp(0))

          width=max(prov2,prov5)
        ENDIF
</width>


</variable>

 # in this case THETA/PHI are not defined because they are considered 
 # in delta (=default)
 # The same syntax apply
</block>

##**********************************************************************##
##                           TF Lepton                                  ##
##**********************************************************************##
<block name='lepton'>
   <particles> e,mu,ta </particles>
   <info> doubel gaussian with parameter depending of the energy </info>
   <width_type> thin </width_type>
   <variable name='E'>
   <tf>
c
	IF (ABS(eta(pexp)) .LT. 1.5) THEN
          prov6=(#31+#32*dsqrt(p(0))+#33*p(0))
          prov7=(#34+#35*dsqrt(p(0))+#36*p(0))
          prov8=(#37+#38*dsqrt(p(0))+#39*p(0))
          prov9=(#40+#41*dsqrt(p(0))+#42*p(0))
          prov10=(#43+#44*dsqrt(p(0))+#45*p(0))

          tf=(exp(-(p(0)-pexp(0)-prov6)**2/2d0/prov7**2))                !first gaussian
          tf=tf+prov8*exp(-(p(0)-pexp(0)-prov9)**2/2d0/prov10**2)     !second gaussian
          tf=tf*((1d0/dsqrt(2d0*pi))/(prov7+prov8*prov10))            !normalisation
	ENDIF

        IF (ABS(eta(pexp)) .GE. 1.5) THEN
          prov6=(#46+#47*dsqrt(p(0))+#48*p(0))
          prov7=(#49+#50*dsqrt(p(0))+#51*p(0))
          prov8=(#52+#53*dsqrt(p(0))+#54*p(0))
          prov9=(#55+#56*dsqrt(p(0))+#57*p(0))
          prov10=(#58+#59*dsqrt(p(0))+#60*p(0))

          tf=(exp(-(p(0)-pexp(0)-prov6)**2/2d0/prov7**2))                !first gaussian
          tf=tf+prov8*exp(-(p(0)-pexp(0)-prov9)**2/2d0/prov10**2)     !second gaussian
          tf=tf*((1d0/dsqrt(2d0*pi))/(prov7+prov8*prov10))            !normalisation
        ENDIF
c
     </tf>
     <width>
        IF (ABS(eta(pexp)) .LT. 1.5)  THEN
          prov7=(#34+#35*dsqrt(pexp(0))+#36*pexp(0))
          prov10=(#43+#44*dsqrt(pexp(0))+#45*pexp(0))

          width=max(prov7,prov10)
	ENDIF

        IF (ABS(eta(pexp)) .GE. 1.5)  THEN
          prov7=(#49+#50*dsqrt(pexp(0))+#51*pexp(0))
          prov10=(#58+#59*dsqrt(pexp(0))+#60*pexp(0))

          width=max(prov7,prov10)
        ENDIF
     </width>
	
   </variable>
</block>
</file>
